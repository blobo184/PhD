rm(list=ls())
library(tidyverse)
source("Code/0_Functions.R")
## Read in data
dat <- read_delim("Data/CCES16.tab",
"\t", escape_double = FALSE, trim_ws = TRUE)
## VI recode
## Only use those who are definitely going to vote or have already voted
dat <- dat %>%
dplyr::filter(dat$CC16_364 == 1 | dat$CC16_364 == 3)
# Recode already voted
dat <- dat %>%
mutate(Voted = dplyr::case_when(
CC16_364b == 1 ~ "Rep",
CC16_364b == 2 ~ "Dem",
CC16_364b == 3 ~ "Other",
CC16_364b == 4 ~ "Other",
CC16_364b == 5 ~ "Other",
CC16_364b == 6 ~ "DNV",
CC16_364b == 7 ~ "DNV",
TRUE ~ NA_character_
))
#table(dat$Voted, dat$CC16_364b) ## Check codes align
# Recode vote intention
dat <- dat %>%
mutate(vi = dplyr::case_when(
CC16_364c == 1 ~ "Rep",
CC16_364c == 2 ~ "Dem",
CC16_364c == 3 ~ "Other",
CC16_364c == 4 ~ "Other",
CC16_364c == 5 ~ "Other",
CC16_364c == 6 ~ "DNV",
CC16_364c == 7 ~ "DNV",
TRUE ~ NA_character_
))
# Join together already voted with vi
dat <- dat %>%
mutate(Pres_vi  = ifelse(CC16_364 == 3, Voted, vi))
## Age
dat$Age <- 2016-dat$birthyr ## Convert birth year into age
## Group age into buckets
age_breaks <- c(17, 34, 44, 64, Inf)
age_labs <- c("18-34", "35-44", "45-64", "65+")
dat <- dat %>%
mutate(Age_orig = Age,
Age = cut(dat$Age,
breaks = age_breaks,
labels = age_labs))
#table(dat$Age_orig, dat$Age) ## Check that codes align
## Education
dat <- dat %>%
mutate(Education = dplyr::case_when(
educ == 1 ~ "HS or less",
educ == 2 ~ "HS or less",
educ == 3 ~ "Some college",
educ == 4 ~ "College grad",
educ == 5 ~ "College grad",
educ == 6 ~ "Postgrad",
TRUE ~ NA_character_
))
#table(dat$Education, dat$educ, useNA = "ifany") ## Check that codes align
## Race
table(dat$race)
dat <- dat %>%
mutate(Race = dplyr::case_when(
race == 1 ~ "White",
race == 2 ~ "Black",
race == 3 ~ "Hispanic",
race == 4 ~ "Other",
race == 5 ~ "Other",
race == 6 ~ "Other",
race == 7 ~ "Other",
race == 8 ~ "Other",
TRUE ~ NA_character_
))
#table(dat$Race, dat$race, useNA = "ifany") ##Check codes align
## Gender
dat <- dat %>%
mutate(Gender = dplyr::case_when(
gender == 1 ~ "Male",
gender == 2 ~ "Female",
TRUE ~ NA_character_
))
#table(dat$Gender, dat$gender) ## Check codes align
## Marital status
dat <- dat %>%
mutate(Marital = case_when(
marstat == 1 ~ "Married",
marstat == 2 ~ "Sep-Divorced",
marstat == 3 ~ "Sep-Divorced",
marstat == 4 ~ "Widowed",
marstat == 5 ~ "Single",
marstat == 6 ~ "Married"
))
#table(dat$marstat, dat$Marital, useNA = "ifany")
## State
dat <- dat %>%
mutate(State = Number_to_State(inputstate),
ST = Number_to_ST(inputstate))
#table(dat$State, dat$inputstate) # check codes align
#table(dat$ST, dat$inputstate) # check codes align
# ## Congressional district
# dat <- dat %>%
#   mutate(CD = paste(ST, formatC(cdid115, width = 2, flag = '0'), sep = "-"), # Format CF
#          CD = dplyr::recode(CD,
#                             "AK-01" = "AK-AL",
#                             "DE-01" = "DE-AL",
#                             "MT-01" = "MT-AL",
#                             "ND-01" = "ND-AL",
#                             "SD-01" = "SD-AL",
#                             "VT-01" = "VT-AL",
#                             "WY-01" = "WY-AL")) ## Deal with at-large states
#
## Date
dat$date <- substr(as.character(dat$starttime_pre), 1,10)
dat$date <- as.Date(dat$date)
dat$days_from_elec <- abs(dat$date - max(dat$date+1, na.rm = T))
## Add region
dat$Region <- State_to_Region(dat$State)
## Select required variables and save
dat <- dat %>%
dplyr::select(Pres_vi, Age, Gender, Education, Race, Marital, State, ST, w = commonweight_vv, Region, days_from_elec) %>%
drop_na()
# ## Append CD pres. vote - Data download from Daily-Kos
# appends <- read.csv("Data/Daily_Kos_2012.csv")
# dat <- left_join(dat, appends, by = "CD")
# dat <- dat %>%
#   rename(Obama_CD = Obama, Romney_CD = Romney)
save(dat, file = "Data/CCES_recoded.RData")
library(tidyverse)
library(parallel)
library(foreach)
library(doParallel)
## First need to call 99_calulate_samples, which calculates
## Sample size per area for 3:2:1 and 2:1 distributions. Based
## on sample size set.
sample <- (51*30) # 51 is no. of States. Second no. is N per area.
source("Code/99_Calculate_sample_dist.R")
## Now Load CCES
load("Data/CCES_recoded.RData")
# Remove DNV and other
dat <- dat %>%
dplyr::filter(Pres_vi != "DNV" & Pres_vi != "Other")
## Merge with past vote and Rep/Dem diff
Past_vote <- Past_vote %>%
mutate(Rep_2012 = arm:::rescale(Rep))
dat <- left_join(dat, Past_vote, by = c("ST" = "state_po"))
## Recode day_from_elec into campaign week.
breaks <- c(-Inf, 7, 14, 21, 28, Inf)
labs <- c(1:5)
dat$campaign_week <- cut(as.numeric(dat$days_from_elec),
breaks = breaks,
labels = labs)
## Here you need to recode the sample per group.
# Using group_2_dist and group_2_dist, set N per area
dat <- dat %>%
mutate(Groups_2 = case_when(
Groups_2 == 1 ~ 46,
Groups_2 == 2 ~ 23),
Groups_3 = case_when(
Groups_3 == 1 ~ 63,
Groups_3 == 2 ~ 42,
Groups_3 == 3 ~ 21),
date_w = 1/as.numeric(as.character(days_from_elec)),
w_v2 = w*date_w) # Adjust weight to preference more recent sample
sample <- function(Groups) {
model_sample <- foreach(const = unique(dat$ST)) %do% {
newdat <- subset(dat, ST == const)
N <- if(Groups == "Even") {
unique(newdat$Even)
} else if (Groups == "Two") {
unique(newdat$Groups_2)
} else if (Groups == "Three") {
unique(newdat$Groups_3)
} else {
stop("Wront input, please put either Even, Two or Three")
}
set.seed(18122020)
model_sample <- sample_n(newdat, N, replace = FALSE, weight = newdat$w)
}
sample <- do.call("rbind", model_sample)
}
sample_Even <- sample(Groups = "Even")
sample_Two <- sample(Groups = "Two")
sample_Three <- sample(Groups = "Three")
save(sample_Even, file = "Data/sample_Even.RData")
save(sample_Two, file = "Data/sample_Two.RData")
save(sample_Three, file = "Data/sample_Three.RData")
##  End
table(sample_Even$ST)
table(sample_Two$ST)
table(sample_Three$ST)
head(sample_Even)
summary(sample_Even$Rep_2012)
summary(sample_Two$Rep_2012)
summary(sample_Three$Rep_2012)
rm(list=ls())
load("Data/ACS.rdata")
post <- ACS %>%
dplyr::filter(ST != "DC")
rm(ACS)
# Append Region and past vote
load("Data/sample_Even.RData")
appends <- sample_Even %>%
group_by(ST) %>%
summarise(Region = unique(Region),
Rep_2012 = unique(Rep_2012))
post <- left_join(post, appends, by = "ST")
rm(appends)
# Create row weight
post <- post %>%
group_by(ST) %>%
mutate(total_pop = sum(pop)) %>%
ungroup() %>%
mutate(w = pop/total_pop)
## Append true Rep vote share
load("Data/Pres_All.rdata")
Past_vote <- x %>%
dplyr::filter(year == 2016) %>%
dplyr::filter(writein == "FALSE") %>%  # Exclude party writein votes
dplyr::select(state_po, party, candidatevotes, totalvotes) %>%
pivot_wider(names_from = party, values_from = candidatevotes) %>%
dplyr::select(state_po, republican, democrat, totalvotes) %>%
mutate(republican = as.numeric(as.character(republican)),
democrat = as.numeric(as.character(democrat)),
Rep = republican / (republican+democrat)) %>%
dplyr::select(state_po, Rep) %>%
dplyr::filter(state_po != "DC")
turnout <- read.csv("Data/2016_turnout.csv")
turnout <- turnout %>%
dplyr::filter(State.Initials != "DC")
Past_vote <- left_join(Past_vote, turnout, by =c("state_po" = "State.Initials"))
Past_vote <- Past_vote %>%
mutate(Rep = Rep * Turnout) %>%
dplyr::select(ST = state_po, True_Rep = Rep, Turnout)
post <- left_join(post, Past_vote, by = "ST")
rm(x, Past_vote, turnout)
## Create campaign week variable
post$campaign_week <- 1
## Save
save(post, file = "Data/poststrat.rdata")
library(xlsx)
## Call functions
source("Code/0_Functions.R")
rm(list=ls())
library(xlsx)
## Call functions
source("Code/0_Functions.R")
# Load poststrat
load("Data/poststrat.rdata")
# poststrat
Results_Even <- poststrat(model = "Even", post= post)
Results_Two <- poststrat(model = "Two", post= post)
Results_Three <- poststrat(model = "Three", post= post)
library(xlsx)
## Poststratification of model estimates
rm(list=ls())
library(xlsx)
## Call functions
source("Code/0_Functions.R")
# Load poststrat
load("Data/poststrat.rdata")
# poststrat
Results_Even <- poststrat(model = "Even", post= post)
Results_Two <- poststrat(model = "Two", post= post)
Results_Three <- poststrat(model = "Three", post= post)
Results_Even
## Write out xlsx with results on tabs
save(Results_Even, Results_Two, Results_Three, file ="Results/Results.RData")
write.xlsx(as.data.frame(Results_Even), file = "Results/Results.xlsx",
sheetName = "Even",
append = FALSE,
row.names = FALSE)
write.xlsx(as.data.frame(Results_Two), file = "Results/Results.xlsx",
sheetName = "Two",
append = TRUE,
row.names = FALSE)
write.xlsx(as.data.frame(Results_Three), file = "Results/Results.xlsx",
sheetName = "Three",
append = TRUE,
row.names = FALSE)
## Get State groups for 2:1 and 3:2:1 distributions
load("Data/sample_Even.RData")
G <- sample_Even %>%
group_by(ST) %>%
summarise(G3 = unique(Groups_3),
G2 = unique(Groups_2))
rm(sample_Even)
## Need to create a variable for each frame with
## Model reference
Results_Even$Model <- "Even"
Results_Two$Model <- "Two"
Results_Three$Model <- "Three"
## Bind frames together
results <- rbind(Results_Even, Results_Two)
results <- rbind(results, Results_Three)
results <- left_join(results, G, by = "ST") ## Append distribution groupings
rm(Results_Even, Results_Two, Results_Three)
## save down
save(results, file = "Results/Results.RData")
## Plots and tables
library(ggpubr)
rm(list=ls())
load("~/Paper 2/Research/External validation/US/Results/Results.RData")
load("~/Paper 2/Research/External validation/US/Data/poststrat.RData")
post <- post %>%
group_by(ST) %>%
summarise(Truth = unique(True_Rep))
results <- left_join(results, post, by = "ST")
rm(post)
## Scatter accuracy plot
# Need to get accuracy figures to put onto the plots
acc <- results %>%
group_by(Model) %>%
mutate(MAE = round(mean(MAE)*100,1),
RMSE = round(mean(RMSE)*100,1),
Cor = round(cor(Pred,Truth)*100,1)) %>%
ungroup() %>%
group_by(Model) %>%
summarise(MAE = unique(MAE),
RMSE = unique(RMSE),
Cor = unique(Cor))
C1 <- paste0("MAE:",acc[1,2],"%",
"\nRMSE:",acc[1,3],"%",
"\nCor:",acc[1,4],"%")
C2 <- paste0("MAE:",acc[2,2],"%",
"\nRMSE:",acc[2,3],"%",
"\nCor:",acc[2,4],"%")
C3 <- paste0("MAE:",acc[3,2],"%",
"\nRMSE:",acc[3,3],"%",
"\nCor:",acc[3,4],"%")
## Plot
p1 <- results %>%
mutate(Model = case_when(
Model == "Two" ~ "2:1",
Model == "Three" ~ "3:2:1",
Model == "Even" ~ "Even")) %>%
ggplot(aes(x = Truth, y = Pred)) +
geom_point(size = 1, alpha= 4/10) +
geom_errorbar(aes(ymin = Pred_lo, ymax=Pred_hi),
width = 1, alpha = 3/10) +
geom_smooth(method = "lm", color = "red") +
geom_abline(intercept = 0, slope = 1, color = "grey",
linetype = "dashed") +
labs(y="",
x="") +
scale_x_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0.1,0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0.1,0.5)) +
facet_wrap(~Model) +
geom_text(aes(x, y, label= lab),
data = data.frame(x=0.15, y = Inf, lab = c(C1, C2, C3),
Model = c("Even", "3:2:1", "2:1")), vjust=1)
p1
ggsave(p1, file= "~/Paper 2/Research/External validation/US/Results/Plots/Accuracy.png")
## Save down data and function to plot.
## I'll use this later in the Rmarkdown.
save(results, C1, C2, C3, file = "~/Paper 2/Research/External validation/US/Results/scatter_data.RData")
results %>%
dplyr::filter(Model != "Two") %>%
group_by(Model, G3) %>%
summarise(MAE = mean(MAE))
results %>%
dplyr::filter(Model != "Three") %>%
group_by(Model, G2) %>%
summarise(MAE = mean(MAE))
results %>%
dplyr::filter(Model != "Two") %>%
group_by(Model, G3) %>%
summarise(MAE = mean(MAE))
View(results)
head(results)
results %>%
dplyr::filter(Model != "Two") %>%
group_by(Model, G3) %>%
summarise(MAE = round(mean(MAE),2),
Width = round(Pred_hi - Pred_lo),2)
results %>%
dplyr::filter(Model != "Two") %>%
group_by(Model, G3) %>%
summarise(MAE = round(mean(MAE),2),
Width = round((Pred_hi - Pred_lo),2))
results %>%
dplyr::filter(Model != "Two") %>%
mutate(Width = Pred_hi - Pred_lo) %>%
group_by(Model, G3) %>%
summarise(MAE = round(mean(MAE),2),
Width = round(mean(Width),2))
results %>%
dplyr::filter(Model != "Two") %>%
mutate(Width = Pred_hi - Pred_lo) %>%
group_by(Model, G2) %>%
summarise(MAE = round(mean(MAE),2),
Width = round(mean(Width),2))
results %>%
dplyr::filter(Model != "Three") %>%
mutate(Width = Pred_hi - Pred_lo) %>%
group_by(Model, G3) %>%
summarise(MAE = round(mean(MAE),2),
Width = round(mean(Width),2))
results %>%
dplyr::filter(Model != "Two") %>%
mutate(Width = Pred_hi - Pred_lo) %>%
group_by(Model, G2) %>%
summarise(MAE = round(mean(MAE),2),
Width = round(mean(Width),2))
rm(list=ls())
## Brier score
Brier_poststrat <- function(model) {
mod <- if(model == "Even"){
readRDS(file = "Results/Model_Even.RDS")} else if(model == "Two"){
readRDS(file = "Results/Model_Two.RDS")} else {
readRDS(file = "Results/Model_Three.RDS")}
load("Data/poststrat.RData")
out <- rstanarm::posterior_epred(mod,
newdata = post,
draws = 500)
out.m <- reshape2::melt(out, varnames = c("iter", "post_row"))
out.m$w <- post$w[out.m$post_row]
out.m$ST <- post$ST[out.m$post_row]
out.m$Turnout <- post$Turnout[out.m$post_row]
out.m$True_Rep <- post$True_Rep[out.m$post_row]
results <- out.m %>%
dplyr::group_by(ST, iter) %>%
summarise(Pred = (sum(value*w)),
True_Rep = unique(True_Rep),
Turnout = unique(Turnout)) %>%
ungroup() %>%
mutate(Pred = Pred * Turnout)
## Need to get 2016 Dem vote for each State
load("Data/Pres_All.rdata")
Past_vote <- x %>%
dplyr::filter(year == 2016) %>%
dplyr::filter(writein == "FALSE") %>%  # Exclude party writein votes
dplyr::select(state_po, party, candidatevotes, totalvotes,year) %>%
mutate(party = case_when(
party == "democratic-farmer-labor" ~ "democrat",
party == "democrat" ~ "democrat",
party == "republican" ~ "republican")) %>%
pivot_wider(names_from = party, values_from = candidatevotes) %>%
dplyr::select(state_po, republican, democrat) %>%
mutate(republican = as.numeric(as.character(republican)),
democrat = as.numeric(as.character(democrat)),
Rep = republican / (republican+democrat),
Dem = democrat / (republican+democrat)) %>%
dplyr::select(state_po, Dem) %>%
dplyr::filter(state_po != "DC")
rm(x)
## Apply turnout
turnout <- read.csv("Data/2016_turnout.csv") %>%
dplyr::filter(!is.na(Turnout) & State.Initials != "DC")
Past_vote <- left_join(Past_vote, turnout, by = c("state_po"="State.Initials")) %>%
mutate(Dem = Dem * Turnout) %>%
dplyr::select(-Turnout)
rm(turnout)
## Append to results by iter
results.exp <- left_join(results, Past_vote, by = c("ST" = "state_po")) %>%
mutate(Rep_win = ifelse(True_Rep > Dem, 1, 0),
Pr_win = ifelse(Pred > Dem, 1, 0)) %>%
group_by(ST) %>%
summarise(Pred = mean(Pred),
True_Rep = unique(True_Rep),
Dem = unique(Dem),
Rep_win = unique(Rep_win),
Pr_win = mean(Pr_win)) %>%
mutate(Brier = (Rep_win - Pr_win)^2)
results.exp
}
Brier_Even <- Brier_poststrat("Even")
Brier_Two <- Brier_poststrat("Two")
Brier_Three <- Brier_poststrat("Three")
Brier_Even$Model <- "Even"
Brier_Two$Model <- "Two"
Brier_Three$Model <- "Three"
Brier <- rbind(Brier_Even, Brier_Two)
Brier <- rbind(Brier, Brier_Three)
load("Data/Sample_even.Rdata")
G <- sample_Even %>%
group_by(ST) %>%
summarise(G2 = unique(Groups_2),
G3 = unique(Groups_3))
rm(sample_Even)
Brier <- left_join(Brier, G, by = "ST")
save(Brier, file = "Results/Brier.RData")
Brier %>%
group_by(Model) %>%
summarise(Brier = mean(Brier))
Brier %>%
dplyr::filter(Model != "Two") %>%
group_by(Model, G3) %>%
summarise(Brier = round(mean(Brier),3))
Brier %>%
dplyr::filter(Model != "Three")%>%
group_by(Model, G2) %>%
summarise(Brier = round(mean(Brier),3))
list.files("Results/")
############
## Let's see what the seats would look like
## This is excluding DC and 5 CD seats.
ec <- read.csv("Data/ec_votes.csv")
ec <- ec %>%
dplyr::select(-Notes)
Brier <- left_join(Brier, ec, by = c("ST" = "Unit"))
rm(ec)
Brier %>%
mutate(Pr_dem = 1-Pr_win) %>%
group_by(Model) %>%
summarise(Rep = sum(Pr_win*ECVotes),
Dem = sum(Pr_dem*ECVotes))
253+277
Brier
view(Brier)
rm(list=ls())
